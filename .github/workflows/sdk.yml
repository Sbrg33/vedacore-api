name: build-and-publish-sdks
on:
  push:
    tags: ["sdk-v*"]

concurrency:
  group: sdk-publish
  cancel-in-progress: true
jobs:
  secrets-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check required secrets
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
          VC_API_KEY_STAGING: ${{ secrets.VC_API_KEY_STAGING }}
        run: |
          [ -n "$NPM_TOKEN" ] || (echo "Missing NPM_TOKEN" && exit 1)
          [ -n "$PYPI_TOKEN" ] || (echo "Missing PYPI_TOKEN" && exit 1)
          [ -n "$VC_API_KEY_STAGING" ] || (echo "Missing VC_API_KEY_STAGING" && exit 1)
  sdk-guard:
    runs-on: ubuntu-latest
    needs: [secrets-check]
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Ensure spec is committed
        run: test -f openapi.json || (echo "openapi.json missing" && exit 1)
      - name: Find previous SDK tag
        id: prev
        run: |
          git fetch --tags
          CUR=${GITHUB_REF_NAME}
          PREV=$(git tag --list 'sdk-v*' | grep -v "^${CUR}$" | sort -V | tail -n1)
          echo "prev_tag=$PREV" >> $GITHUB_OUTPUT
      - name: Skip if no previous tag
        if: steps.prev.outputs.prev_tag == ''
        run: echo "No previous tag â€” skipping diff gate (first release)."
      - name: Extract previous spec
        if: steps.prev.outputs.prev_tag != ''
        run: |
          git show "${{ steps.prev.outputs.prev_tag }}:openapi.json" > openapi_prev.json
      - name: Breaking-change check (oasdiff)
        if: steps.prev.outputs.prev_tag != ''
        run: |
          docker run --rm -v "$PWD:/work" tufin/oasdiff:2.8.8 \
            breaking /work/openapi_prev.json /work/openapi.json

  ts:
    runs-on: ubuntu-latest
    needs: [secrets-check, sdk-guard]
    steps:
      - uses: actions/checkout@v4
      - name: Ensure OpenAPI spec (prefer repo)
        run: |
          if [ ! -f openapi.json ]; then
            echo "openapi.json not found in repo; attempting local export or remote fetch"
            echo "::warning::openapi.json missing; set SPEC_BASE to export from a running API"
            exit 1
          fi
      - name: Extract OpenAPI version
        id: ver
        run: |
          OPENAPI_VERSION=$(jq -r '.info.version' openapi.json)
          echo "OPENAPI_VERSION=$OPENAPI_VERSION" >> $GITHUB_ENV
      - name: Assert prod server URL present
        run: |
          URL=$(jq -r '.servers[0].url // empty' openapi.json)
          if [ "$URL" != "https://api.vedacore.io" ]; then
            echo "::error::servers[0].url must be https://api.vedacore.io for release builds (found: $URL)"
            exit 1
          fi
      - name: Assert tag version matches OpenAPI info.version
        run: |
          TAG_VERSION=${GITHUB_REF_NAME#sdk-v}
          if [ "$TAG_VERSION" != "$OPENAPI_VERSION" ]; then
            echo "::error::Tag version ($TAG_VERSION) != OpenAPI info.version ($OPENAPI_VERSION)"
            exit 1
          fi
      - name: Generate TS SDK
        run: |
          docker run --rm -v "$PWD":/local openapitools/openapi-generator-cli:v7.6.0 generate \
            -i /local/openapi.json \
            -g typescript-fetch \
            -o /local/sdk/ts \
            -p useSingleRequestParameter=true,typescriptThreePlus=true,supportsES6=true,withSeparateModelsAndApi=true,useUnionTypes=true,npmName=@vedacore/api,npmVersion=${OPENAPI_VERSION}
      - name: Ensure TS package version matches
        run: |
          jq ".version=\"$OPENAPI_VERSION\"" sdk/ts/package.json > sdk/ts/package.json.tmp && mv sdk/ts/package.json.tmp sdk/ts/package.json
      - name: Publish to npm
        run: |
          cd sdk/ts
          npm ci
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  py:
    runs-on: ubuntu-latest
    needs: [secrets-check, sdk-guard]
    steps:
      - uses: actions/checkout@v4
      - name: Install generator (pinned)
        run: pipx install openapi-python-client==0.21.6
      - name: Ensure OpenAPI spec (prefer repo)
        run: |
          if [ ! -f openapi.json ]; then
            echo "::error::openapi.json missing; commit it to the repo for deterministic builds"
            exit 1
          fi
      - name: Extract OpenAPI version
        run: |
            echo "OPENAPI_VERSION=$(jq -r '.info.version' openapi.json)" >> $GITHUB_ENV
      - name: Generate Python SDK
        run: openapi-python-client generate --path openapi.json --meta setup --output-path sdk/python
      - name: Pin Python SDK version to OpenAPI info.version
        run: |
          sed -i -E "s/^version = .*/version = \"$OPENAPI_VERSION\"/" sdk/python/pyproject.toml || true
      - name: Build and publish
        run: |
          cd sdk/python
          python -m build
          twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

  smoke-ts:
    if: startsWith(github.ref, 'refs/tags/sdk-v')
    runs-on: ubuntu-latest
    needs: [ts]
    steps:
      - name: Setup temp project
        run: |
          mkdir -p /tmp/vc-ts && cd /tmp/vc-ts
          npm init -y
          VERSION=${GITHUB_REF_NAME#sdk-v}
          npm i @vedacore/api@"$VERSION" typescript tsx eventsource
          node -e "console.log('installed @vedacore/api', require('@vedacore/api') ? 'OK' : 'FAIL')"

  smoke-py:
    if: startsWith(github.ref, 'refs/tags/sdk-v')
    runs-on: ubuntu-latest
    needs: [py]
    steps:
      - name: Install and import SDK
        run: |
          VERSION=${GITHUB_REF_NAME#sdk-v}
          python -m pip install --upgrade pip
          pip install "vedacore-api==$VERSION"
          python - <<'PY'
import vedacore_api
print('vedacore_api OK', vedacore_api.__version__ if hasattr(vedacore_api,'__version__') else '')
PY

  smoke-ts-typed:
    if: startsWith(github.ref, 'refs/tags/sdk-v')
    runs-on: ubuntu-latest
    needs: [ts]
    env:
      VC_API_KEY: ${{ secrets.VC_API_KEY_STAGING }}
    steps:
      - run: node -v && npm -v
      - run: |
          VERSION=${GITHUB_REF_NAME#sdk-v}
          npm init -y
          npm i @vedacore/api@"$VERSION" eventsource tsx typescript
      - name: Run typed call + SSE handshake
        run: |
          cat > smoke.ts <<'TS'
          import { Configuration, KpApi, AuthApi } from "@vedacore/api";
          import EventSource from "eventsource";

          const cfg = new Configuration({
            basePath: "https://api.vedacore.io",
            headers: { "X-API-Key": process.env.VC_API_KEY! },
          });

          async function main() {
            const kp = new KpApi(cfg);
            const res = await (kp as any).kpRunAnalysis?.({ kPRequest: { timestamp: "2025-09-03T15:00:00Z", lat: 40.71, lon: -74.00 } });
            if (!res) throw new Error("KP analysis failed or method not found");

            const auth = new AuthApi(cfg) as any;
            const getToken = auth.authStreamToken ?? auth.v1AuthStreamToken;
            if (!getToken) throw new Error("auth stream-token method not found");
            const t = await getToken.call(auth, { streamTokenRequest: { topics: ["enhanced"], ttlSeconds: 60 } });

            const url = `https://api.vedacore.io/api/v1/stream/enhanced?token=${t.token ?? t?.data?.token ?? t}`;
            const es = new EventSource(url);
            let done = false;
            const timer = setTimeout(() => { if (!done) { console.log("SSE timeout"); process.exit(0); } }, 10000);
            es.onmessage = (e) => { done = true; console.log("SSE:", String(e.data || "").slice(0, 120)); es.close(); clearTimeout(timer); process.exit(0); };
            es.onerror = () => { /* tolerate idle stream */ };
          }
          main().catch((e) => { console.error(e); process.exit(1); });
          TS
          npx tsx smoke.ts

  smoke-py-typed:
    if: startsWith(github.ref, 'refs/tags/sdk-v')
    runs-on: ubuntu-latest
    needs: [py]
    env:
      VC_API_KEY: ${{ secrets.VC_API_KEY_STAGING }}
    steps:
      - run: python -V
      - run: |
          VERSION=${GITHUB_REF_NAME#sdk-v}
          python -m pip install --upgrade pip
          pip install "vedacore-api==$VERSION" httpx
      - name: Run typed call + SSE handshake
        run: |
          python - <<'PY'
import os, importlib, httpx
from vedacore_api import Client

client = Client(base_url="https://api.vedacore.io", headers={"X-API-Key": os.environ["VC_API_KEY"]})

# KP analysis (try primary name)
kp_mod = importlib.import_module('vedacore_api.api.kp')
kp_fn = getattr(kp_mod, 'kp_run_analysis', None)
if kp_fn is None:
    raise SystemExit('kp_run_analysis not found')
models = importlib.import_module('vedacore_api.models')
Req = getattr(models, 'KpAnalysisRequest', None) or getattr(models, 'KpRequest', None)
if Req is None:
    raise SystemExit('KP request model not found')
req = Req(timestamp="2025-09-03T15:00:00Z", lat=40.71, lon=-74.00)
r = kp_fn.sync(client=client, json_body=req)
assert r is not None

# Stream token: try both names
auth_mod = importlib.import_module('vedacore_api.api.auth')
tok_fn = getattr(auth_mod, 'auth_stream_token', None) or getattr(auth_mod, 'v1_auth_stream_token', None)
TokReq = getattr(models, 'StreamTokenRequest')
tok = tok_fn.sync(client=client, json_body=TokReq(topics=["enhanced"], ttl_seconds=60))
token = getattr(tok, 'token', None) or getattr(getattr(tok, 'data', None) or {}, 'get', lambda _: None)('token')
with httpx.Client(timeout=10.0) as c:
    with c.stream("GET", f"https://api.vedacore.io/api/v1/stream/enhanced?token={token}") as s:
        for line in s.iter_lines():
            if line and line.startswith(b"data:"):
                print("SSE:", line[:80])
                break
PY
  # Optional: breaking change gate (requires previous spec)
  # diff:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Download previous release spec (implement per your storage)
  #       run: echo "Provide previous openapi.json here" && exit 0
  #     - name: Compare OpenAPI specs
  #       run: |
  #         docker run --rm -v "$PWD":/work tufin/oasdiff:latest \
  #           breaking /work/prev-openapi.json /work/openapi.json || echo "No breaking changes"
