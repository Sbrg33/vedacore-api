name: Deploy (SSH via GHCR)

on:
  # Manual deploy with overrides
  workflow_dispatch:
    inputs:
      tag:
        description: "Image tag to deploy (default: latest)"
        default: "latest"
        required: false
      public_url:
        description: "Public URL to test (default: https://api.vedacore.io)"
        default: "https://api.vedacore.io"
        required: false
      environment:
        description: "Target environment (production|staging)"
        default: "production"
        required: false
      verify_symbols:
        description: "Run ATS symbol contract checks (true|false)"
        default: "true"
        required: false
  # Auto-deploy when build & push succeeds on main
  workflow_run:
    workflows: ["Build & Push Image (GHCR)"]
    types: [completed]

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Only auto-deploy successful runs on main, or any manual dispatch
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' &&
       github.event.workflow_run.conclusion == 'success' &&
       github.event.workflow_run.head_branch == 'main')
    environment:
      name: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'production' }}
      url: ${{ (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging') && 'https://staging.api.vedacore.io' || 'https://api.vedacore.io' }}
    concurrency:
      group: deploy-vedacore-api
      cancel-in-progress: true
    env:
      APP_DIR: /opt/vedacore-api
      PORT: ${{ (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging') && '8000' || '80' }}
    steps:
      - name: Compute image tag
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            # Use long SHA tag published by build workflow
            echo "tag=sha-${{ github.event.workflow_run.head_sha }}" >> "$GITHUB_OUTPUT"
          else
            echo "tag=${{ inputs.tag || 'latest' }}" >> "$GITHUB_OUTPUT"
          fi

      - name: Resolve REDIS_URL secret
        id: redis
        env:
          ENV_INPUT: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || '' }}
          REDIS_URL_PROD: ${{ secrets.REDIS_URL }}
          REDIS_URL_STAGING: ${{ secrets.STAGING_REDIS_URL }}
        run: |
          set -euo pipefail
          URL="${REDIS_URL_PROD:-}"
          if [ "${ENV_INPUT:-}" = "staging" ]; then
            if [ -n "${REDIS_URL_STAGING:-}" ]; then
              URL="${REDIS_URL_STAGING}"
            fi
          fi
          echo "url=${URL}" >> "$GITHUB_OUTPUT"
      - name: Deploy on server (pull image)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_SSH_KEY }}
          port: ${{ secrets.DO_PORT || '22' }}
          script_stop: true
          envs: AUTH_JWT_SECRET,CORS_ALLOWED_ORIGINS,GHCR_USERNAME,GHCR_TOKEN,PORT,REDIS_URL
        env:
          AUTH_JWT_SECRET: ${{ secrets.AUTH_JWT_SECRET }}
          CORS_ALLOWED_ORIGINS: ${{ secrets.CORS_ALLOWED_ORIGINS }}
          GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          REDIS_URL: ${{ steps.redis.outputs.url }}
          script: |
            set -euo pipefail
            IMAGE="ghcr.io/${{ github.repository_owner }}/vedacore-api:${{ steps.tag.outputs.tag }}"
            # Check required environment variables
            : ${GHCR_USERNAME:?GHCR_USERNAME not set}
            : ${GHCR_TOKEN:?GHCR_TOKEN not set}
            : ${AUTH_JWT_SECRET:?AUTH_JWT_SECRET not set}
            : ${CORS_ALLOWED_ORIGINS:?CORS_ALLOWED_ORIGINS not set}
            # Login to GHCR (read:packages token)
            docker login ghcr.io -u "$GHCR_USERNAME" -p "$GHCR_TOKEN"
            # Ensure firewall allows origin ports (no-op if ufw not installed)
            if command -v sudo >/dev/null 2>&1 && command -v ufw >/dev/null 2>&1; then \
              echo "Configuring UFW firewall rules..."; \
              # Keep SSH accessible
              sudo ufw allow 22/tcp || true; \
              # Allow production HTTP and optional HTTPS
              sudo ufw allow 80/tcp || true; \
              sudo ufw allow 443/tcp || true; \
              # Allow the mapped app port (staging may use 8000)
              if [ "${PORT}" != "80" ]; then sudo ufw allow ${PORT}/tcp || true; fi; \
              # Enable UFW on reboot and now
              sudo systemctl enable ufw || true; \
              sudo ufw --force enable || true; \
              sudo ufw reload || true; \
            fi
            # Stop Apache and nginx to ensure port 80 is available
            systemctl stop apache2 || true
            systemctl stop nginx || true
            # Pull & restart container directly on port 80 (bypass nginx)
            docker rm -f vedacore-api || true
            docker pull "$IMAGE"
            docker run -d --rm --name vedacore-api \
              -p ${PORT}:8000 \
              -e ENVIRONMENT=production \
              -e VC_ENV=remote \
              -e AUTH_JWT_SECRET="${AUTH_JWT_SECRET}" \
              -e CORS_ALLOWED_ORIGINS="${CORS_ALLOWED_ORIGINS}" \
              ${REDIS_URL:+ -e REDIS_URL="${REDIS_URL}"} \
              "$IMAGE"
            # Wait for readiness on direct port access
            i=0; ok=0; \
            while [ $i -lt 45 ]; do \
              if curl -fsS http://127.0.0.1:${PORT}/api/v1/health/ready >/dev/null 2>&1; then ok=1; break; fi; \
              i=$((i+1)); sleep 2; \
            done; \
            if [ $ok -eq 1 ]; then echo "‚úÖ Ready"; else echo "‚ùå Not ready"; docker logs vedacore-api || true; exit 1; fi

  post-smoke:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Public API smoke test
        run: |
          set -euo pipefail
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            PUBLIC_URL="https://api.vedacore.io"
          else
            if [ -n "${{ inputs.public_url }}" ]; then
              PUBLIC_URL="${{ inputs.public_url }}"
            elif [ "${{ inputs.environment }}" = "staging" ]; then
              PUBLIC_URL="https://staging.api.vedacore.io"
            else
              PUBLIC_URL="https://api.vedacore.io"
            fi
          fi
          
          echo "üîç Testing public readiness: $PUBLIC_URL/api/v1/health/ready"
          if curl -fsS "$PUBLIC_URL/api/v1/health/ready" >/dev/null; then
            echo "‚úÖ Public readiness check passed"
          else
            echo "‚ùå Public readiness check failed"
            exit 1
          fi
          
          echo "üîç Testing docs endpoint: $PUBLIC_URL/api/docs"
          if curl -fsS "$PUBLIC_URL/api/docs" >/dev/null; then
            echo "‚úÖ Public docs endpoint accessible"
          else
            echo "‚ùå Public docs endpoint failed"
            exit 1
          fi

          if [ "${{ inputs.verify_symbols || 'true' }}" = "true" ] || [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "üîç ATS symbols acceptance: [\"VEN\",\"MER\"] (should be 200)"
            if curl -fsS -X POST "$PUBLIC_URL/api/v1/ats/transit" \
                 -H 'accept: application/json' -H 'content-type: application/json' \
                 -d '{"targets":["VEN","MER"]}' >/dev/null; then
              echo "‚úÖ ATS symbols accepted"
            else
              echo "‚ùå ATS symbols not accepted"
              exit 1
            fi

            echo "üîç ATS old tokens rejection: [\"MERC\",\"MOON\"] (should be 422)"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST "$PUBLIC_URL/api/v1/ats/transit" \
                 -H 'accept: application/json' -H 'content-type: application/json' \
                 -d '{"targets":["MERC","MOON"]}')
            if [ "$STATUS" = "422" ]; then
              echo "‚úÖ Old tokens correctly rejected (422)"
            else
              echo "‚ùå Expected 422 for old tokens, got $STATUS"
              exit 1
            fi
          else
            echo "‚ÑπÔ∏è Skipping ATS symbol contract checks (verify_symbols=false)"
          fi
          
          echo "‚úÖ Post-deploy public smoke tests completed successfully"
